实际项目中的应用
功能背景
在我们公司的应用程序中有一个app分享功能，目前暂定可以分享到 【朋友圈，微信好友，sina，qq】四个地方，
分享所需的内容包含 【标题， 分享图片，分享内容， 分享链接】，
产品经理不能确定是否后续会添加新的 分享入口，比如 支付宝 ，qq空间，对于产品的内容也不是固定的，
也许会增加其他内容，如果我们按常规设计类，我们要设计四个类，如果内容模版有变动需要在方法中修改，
如果加入了其他内容属性，之前设计的代码时间就浪费了。

既然是分享模版可以当成一种算法策略，我就联想到了使用策略模式。
抽象策略类
/**
 * 标题
 */
public interface ShareTitle {

    String showTitle();
}

/**
 * 分享内容
 */
public interface ShareContent {

    String showContent();
}

/**
 * 缩略图
 */
public interface ShareImageUrl {

    String showImageUrl(final String platform);

}

/**
 * 分享链接
 */
public interface ShareLink {

    String getShareLink(final String platform, final String userToken);

}


具体抽象类 以微信好友分享为例
/**
 * 微信标题
 */
public class WechatTitle implements ShareTitle {

    @Override
    public String showTitle() {
        return BundleUtil.getResult("share.wechat.title");
    }
}

/**
 * 微信分享内容
 */
public class WechatContent implements ShareContent {

    @Override
    public String showContent() {
        return BundleUtil.getResult("share.wechat.content");
    }
}

/**
 * 微信缩略图
 */
public class WechatImageUrl implements ShareImageUrl {

    @Override
    public String showImageUrl(final String platform) {
        return BundleUtil.getResult("share.wechat.image.url." + platform);
    }
}

/**
 * 微信分享链接
 */
public class WechatShareLink implements ShareLink {

    @Override
    public String getShareLink(final String platform, final String userToken) {
        return BundleUtil.getResult("share.wechat.link." + platform) + userToken;
    }
}

/**
 * 微信分享
 */
public class WechatShare extends ShareContext {

    public WechatShare() {
        super.shareTitle = new WechatTitle();
        super.shareContent = new WechatContent();
        super.shareImageUrl = new WechatImageUrl();
        super.shareLink = new WechatShareLink();
    }

}

其实上面具体策略的拆分和建造者模式相似了，在代码中我使用了BundleUtil.getResult（）这个方法，该方法可以读取配置文件，这样可以方便具体内容的修改，而不需要修改类代码。
具体resource下面的properties文件中的参数配置如下：
share.wechat.title=这个APP竟然这么棒
share.wechat.content=还不快来加入我们旅游派对
share.wechat.link.android=https://www.666.com/salesman/shareRegister?android&userToken=
share.wechat.link.ios=https://www.666.com/salesman/shareRegister?ios&userToken=
share.wechat.image.url.android=android wechat img url
share.wechat.image.url.ios=ios wechat img url

1=com.nicky.facade.sharestrategy.targets.QQShare

这样，如果模版的内容发生变动，我只需在配置文件中修改即可。
然后是策略模式上下文
public class ShareContext {

    protected ShareTitle shareTitle;

    protected ShareContent shareContent;

    protected ShareImageUrl shareImageUrl;

    protected ShareLink shareLink;

    public static ShareContext getShareTarget(Integer type) {
        String className = BundleUtil.getResult(type.toString());
        Class cls;
        try {
            cls = Class.forName(className);
            return (ShareContext) cls.newInstance();
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return null;
    }

    public final String showTitle() {
        return shareTitle.showTitle();
    }

    public final String showContent() {
        return shareContent.showContent();
    }

    public final String displayImageUrl(final String platform) {
        return shareImageUrl.showImageUrl(platform);
    }

    public final String displayShareLinkUrl(final String platform, final String  userToken) {
        return shareLink.getShareLink(platform, userToken);
    }

    public static ShareInfo getShareInfo(ShareContext context, String platform, String userToken) {
        ShareInfo info = new ShareInfo();
        info.setContent(context.showContent());
        info.setImageUrl(context.displayImageUrl(platform));
        info.setTitle(context.showTitle());
        info.setShareLink(context.displayShareLinkUrl(platform, userToken));
        return info;
    }
}


getShareTarget方法中通过反射的方式去获取对象，从而避免增加分享渠道的时候，修改方法中的代码，符合开闭原则
客户端
    public static void main(String[] args) throws Exception {
        ShareContext context = ShareContext
                .getShareTarget(1);
        System.out.println(context.showContent());
        System.out.println(context.showTitle());
        System.out.println(context.displayImageUrl("android"));
        System.out.println(context.displayShareLinkUrl("ios", "?#"));
    }


比如我们协定传入参数1表示微信分享，相当于指定了分享的模版策略。打印的结果类似如下：

还不快来加入我们旅游派对
这个APP竟然这么棒
"android qq img url
https:///www.666.com/salesman/shareRegister?ios&userToken=?#

当然当前的设计是存在缺陷的，如果内容的组成有新增一个分享属性，还是需要修改类中的构造器对象，所以我们可以通过builder模式去优化策略模式。

